# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FaucetAccount(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, x_address: str=None, classic_address: str=None, secret: str=None):  # noqa: E501
        """FaucetAccount - a model defined in Swagger

        :param x_address: The x_address of this FaucetAccount.  # noqa: E501
        :type x_address: str
        :param classic_address: The classic_address of this FaucetAccount.  # noqa: E501
        :type classic_address: str
        :param secret: The secret of this FaucetAccount.  # noqa: E501
        :type secret: str
        """
        self.swagger_types = {
            'x_address': str,
            'classic_address': str,
            'secret': str
        }

        self.attribute_map = {
            'x_address': 'xAddress',
            'classic_address': 'classicAddress',
            'secret': 'secret'
        }
        self._x_address = x_address
        self._classic_address = classic_address
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt) -> 'FaucetAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FaucetAccount of this FaucetAccount.  # noqa: E501
        :rtype: FaucetAccount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def x_address(self) -> str:
        """Gets the x_address of this FaucetAccount.


        :return: The x_address of this FaucetAccount.
        :rtype: str
        """
        return self._x_address

    @x_address.setter
    def x_address(self, x_address: str):
        """Sets the x_address of this FaucetAccount.


        :param x_address: The x_address of this FaucetAccount.
        :type x_address: str
        """
        if x_address is None:
            raise ValueError("Invalid value for `x_address`, must not be `None`")  # noqa: E501

        self._x_address = x_address

    @property
    def classic_address(self) -> str:
        """Gets the classic_address of this FaucetAccount.


        :return: The classic_address of this FaucetAccount.
        :rtype: str
        """
        return self._classic_address

    @classic_address.setter
    def classic_address(self, classic_address: str):
        """Sets the classic_address of this FaucetAccount.


        :param classic_address: The classic_address of this FaucetAccount.
        :type classic_address: str
        """
        if classic_address is None:
            raise ValueError("Invalid value for `classic_address`, must not be `None`")  # noqa: E501

        self._classic_address = classic_address

    @property
    def secret(self) -> str:
        """Gets the secret of this FaucetAccount.


        :return: The secret of this FaucetAccount.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret: str):
        """Sets the secret of this FaucetAccount.


        :param secret: The secret of this FaucetAccount.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")  # noqa: E501

        self._secret = secret
