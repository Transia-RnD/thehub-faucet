# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class XrplFaucetRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, destination: str=None, xrp_amount: str=None):  # noqa: E501
        """XrplFaucetRequest - a model defined in Swagger

        :param destination: The destination of this XrplFaucetRequest.  # noqa: E501
        :type destination: str
        :param xrp_amount: The xrp_amount of this XrplFaucetRequest.  # noqa: E501
        :type xrp_amount: str
        """
        self.swagger_types = {
            'destination': str,
            'xrp_amount': str
        }

        self.attribute_map = {
            'destination': 'destination',
            'xrp_amount': 'xrpAmount'
        }
        self._destination = destination
        self._xrp_amount = xrp_amount

    @classmethod
    def from_dict(cls, dikt) -> 'XrplFaucetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The XrplFaucetRequest of this XrplFaucetRequest.  # noqa: E501
        :rtype: XrplFaucetRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self) -> str:
        """Gets the destination of this XrplFaucetRequest.


        :return: The destination of this XrplFaucetRequest.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination: str):
        """Sets the destination of this XrplFaucetRequest.


        :param destination: The destination of this XrplFaucetRequest.
        :type destination: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def xrp_amount(self) -> str:
        """Gets the xrp_amount of this XrplFaucetRequest.


        :return: The xrp_amount of this XrplFaucetRequest.
        :rtype: str
        """
        return self._xrp_amount

    @xrp_amount.setter
    def xrp_amount(self, xrp_amount: str):
        """Sets the xrp_amount of this XrplFaucetRequest.


        :param xrp_amount: The xrp_amount of this XrplFaucetRequest.
        :type xrp_amount: str
        """
        if xrp_amount is None:
            raise ValueError("Invalid value for `xrp_amount`, must not be `None`")  # noqa: E501

        self._xrp_amount = xrp_amount
